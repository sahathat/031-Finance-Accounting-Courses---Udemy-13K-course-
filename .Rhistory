library("rmarkdown")
# write markdown file
install.packages("rmarkdown")
library("rmarkdown")
install.packages("Knit")
library("Knit")
library("rmarkdown")
# write markdown file
install.packages("rmarkdown")
install.packages("rmarkdown")
library("rmarkdown")
# write markdown file
install.packages("rmarkdown")
library("rmarkdown")
Udemy <- read.csv("https://raw.githubusercontent.com/sit-2021-int214/031-Finance-Accounting-Courses---Udemy-13K-course-/main/assignment/data/udemy_output_All_Finance__Accounting_p1_p626.csv")
Udemy <- read.csv("https://raw.githubusercontent.com/sit-2021-int214/031-Finance-Accounting-Courses---Udemy-13K-course-/main/assignment/data/udemy_output_All_Finance__Accounting_p1_p626.csv")
View(Udemy)
install.packages("readr")
install.packages("assertive")
install.packages("stringr")
install.packages("dplyr")
library("readr")
library("assertive")
library("stringr")
library("dplyr")
# Explore data
glimpse(Udemy) #data of Udemy have 13608 rows and 20 columns by each columns have
# check data type of Udemy
glimpse(Udemy)
# change type of value form character of amount to numberic
# discount price
Udemy$discount_price__amount <- as.numeric(Udemy$discount_price__amount)
# price detail
Udemy$price_detail__amount <- as.numeric(Udemy$price_detail__amount)
# by id is duplicate
Udemy$id %>% duplicated() %>% sum()
# When amount price of course aren't show in table should replace by global average
# discount price
Udemy$discount_price__amount <- replace(Udemy$discount_price__amount,is.na(Udemy$discount_price__amount), round(mean(Udemy$discount_price__amount,na.rm=T)) )
# price detail
Udemy$price_detail__amount <- replace(Udemy$price_detail__amount,is.na(Udemy$price_detail__amount), round(mean(Udemy$discount_price__amount,na.rm=T)) )
# When currency price of course aren't show in table should replace by INR
# discount price
Udemy$discount_price__currency <- replace(Udemy$discount_price__currency,Udemy$discount_price__currency=="", "INR")
# detail of price
Udemy$price_detail__amount <- replace(Udemy$price_detail__amount,Udemy$price_detail__amount=="", "INR")
# and replace by string with current+amount with mutate
# discount price
Udemy <- Udemy %>% mutate(discount_price__price_string=paste(discount_price__currency,discount_price__amount))
# note your can't use character plus character by character + character but can use paste(x1,x2,...,(collapse="-")[optional])
# price detail
Udemy <- Udemy %>% mutate(price_detail__price_string=paste(price_detail__currency,price_detail__amount))
# save cleaning data in csv file
write.csv(Udemy, "D://Benz/Resources/DBMS/031-Finance-Accounting-Courses---Udemy-13K-course-/assignment/data/udemy_output_All_Finance__Accounting_p1_p626_after_clean.csv", row.names=F)
# find title name, rating, number of subscribers and number of reviews who are top of 10 courses have the most reviews in each course
Udemy %>%
select(title,rating,num_subscribers,num_reviews) %>%
arrange(desc(num_reviews)) %>%
summarise(title,rating,subscribe=num_subscribers,reviews=num_reviews) %>%
head(10)
# find number of courses and price detail of amount who are top of 15 courses have the most price detail of amount course
Udemy %>%
count(amount=price_detail__amount) %>%
arrange(desc(amount)) %>%
head(15)
Udemy %>% count(is_paid) %>% summarise(is_paid,count_course=n)
Udemy %>% group_by(is_paid) %>%
select(rating,num_subscribers,num_reviews) %>%
summarise(average_rating = mean(rating, na.rm = TRUE),
average_subscribes = mean(num_subscribers,na.rm=TRUE),
max_subscribes = max(num_subscribers,na.rm=TRUE),
average_reviews = mean(num_reviews, na.rm=TRUE),
max_reviews = max(num_reviews, na.rm=TRUE)
)
# Hypothesis rating โดยใช้การสุ่มกลุ่มตัวอย่าง จากข้อมูล 2 ชุดที่มีจำนวนเท่ากัน 100 ชุด
# H0: mean_pop_rating_paid = mean_pop_rating_free
# Ha: mean_pop_rating_paid != mean_pop_rating_free
# test type: two tail: upper tail
sample_rating_is_paid <- sample(Udemy$rating[Udemy$is_paid == "True"], 100, replace = F)
sample_rating_is_paid
sample_rating_is_free <- sample(Udemy$rating[Udemy$is_paid == "False"], 100, replace = F)
sample_rating_is_free
# ช่วงเตรียมอุปกรณ์
n_rating_paid <- 100
n_rating_free <- 100
mean_pop_rating_paid <- mean(Udemy$rating[Udemy$is_paid == "True"])
mean_pop_rating_free <- mean(Udemy$rating[Udemy$is_paid == "False"])
mean_rating_paid <- mean(sample_rating_is_paid)
mean_rating_free <- mean(sample_rating_is_free)
sd_known_rating_paid <- sd(Udemy$rating[Udemy$is_paid == "True"])
sd_known_rating_free <- sd(Udemy$rating[Udemy$is_paid == "False"])
# หาค่า z value ในการทดสอบ
sd_error_rating <- sqrt(sd_known_rating_paid^2/n_paid+sd_known_rating_free^2/n_free)
# หาค่า z value ในการทดสอบ
sd_error_rating <- sqrt(sd_known_rating_paid^2/n_rating_paid+sd_known_rating_free^2/n_rating_free)
z_rating <- ((mean_rating_paid-mean_rating_free)-(mean_pop_rating_paid-mean_pop_rating_free))/sd_error_rating
z_rating
# หาค่า p value ในการทดสอบ
if(z_rating < 0){
p_rating <- pnorm(z_rating)
} else {
p_rating <- 1-pnorm(z_rating)
}
p_rating
# สรุปผล
# p-value
if(p_rating < 0.05/2){
print("Reject H0")
} else {
print("Accept H0")
}
# critical value
if(z_rating > qnorm(1-0.05/2)){
print("Reject H0")
} else {
print("Accept H0")
}
# ถ้าหากเราจะไปทำนายหาช่วงผลต่างของ rating ที่จ่ายด้วยเงินและไม่จ่ายด้วยเงิน
margin_rating <- qnorm(1-0.05/2)*sd_error_rating
margin_rating
# upper value
upper_rating <- abs(mean_rating_paid-mean_rating_free) + margin_rating
upper_rating
# lower value
lower_rating <- abs(mean_rating_paid-mean_rating_free) - margin_rating
lower_rating
# Hypothesis subscribes โดยใช้การสุ่มกลุ่มตัวอย่าง จากข้อมูล 2 ชุดที่มีจำนวนเท่ากัน 100 ชุด
# H0: mean_pop_sub_paid = mean_pop_sub_free
# Ha: mean_pop_sub_paid != mean_pop_sub_free
# curve type: two tail: upper tail
sample_sub_is_paid <- sample(Udemy$num_subscriber[Udemy$is_paid == "True"], 100, replace = F)
sample_sub_is_paid
sample_sub_is_free <- sample(Udemy$num_subscriber[Udemy$is_paid == "False"], 100, replace = F)
sample_sub_is_free
# ช่วงเตรียมอุปกรณ์
n_paid <- 100
n_free <- 100
mean_pop_sub_paid <- mean(Udemy$num_subscriber[Udemy$is_paid == "True"])
mean_pop_sub_free <- mean(Udemy$num_subscriber[Udemy$is_paid == "False"])
mean_sub_paid <- mean(sample_sub_is_paid)
mean_sub_free <- mean(sample_sub_is_free)
sd_known_sub_paid <- sd(Udemy$num_subscriber[Udemy$is_paid == "True"])
sd_known_sub_free <- sd(Udemy$num_subscriber[Udemy$is_paid == "False"])
# หาค่า z value ในการทดสอบ
sd_error_sub <- sqrt(sd_known_sub_paid^2/n_paid+sd_known_sub_free^2/n_free)
z_sub <- ((mean_sub_paid-mean_sub_free)-(mean_pop_sub_paid-mean_pop_sub_free))/sd_error_sub
z_sub
# หาค่า p value ในการทดสอบ
if(z_sub < 0){
p_sub <- pnorm(z_sub)
} else {
p_sub <- 1-pnorm(z_sub)
}
p_sub
# สรุปผล
# p-value
if(p_sub < 0.05/2){
print("Reject H0")
} else {
print("Accept H0")
}
# critical value
if(z_sub > qnorm(1-0.05/2)){
print("Reject H0")
} else {
print("Accept H0")
}
# ถ้าหากเราจะไปทำนายหาช่วงผลต่างของ rating ที่จ่ายด้วยเงินและไม่จ่ายด้วยเงิน
margin_sub <- qnorm(1-0.05/2)*sd_error_sub
margin_sub
# upper value
upper_sub <- abs(mean_sub_paid-mean_sub_free) + margin_sub
upper_sub
# lower value
lower_sub <- abs(mean_sub_paid-mean_sub_free) - margin_sub
lower_sub
# write markdown file
install.packages("rmarkdown")
install.packages("tinytex")
library("tinytex")
profvis::profvis({})
source("D:/Benz/Resources/DBMS/031-Finance-Accounting-Courses---Udemy-13K-course-/assignment/MidtermAssignment.R")
install.packages("rmarkdown")
install.packages("tinytex")
install.packages("stringr")
install.packages("assertive")
install.packages("readr")
install.packages("dplyr")
source("D:/Benz/Resources/DBMS/031-Finance-Accounting-Courses---Udemy-13K-course-/assignment/MidtermAssignment.R")
install.packages("tinytex")
install.packages("rmarkdown")
install.packages("readr")
install.packages("dplyr")
install.packages("assertive")
install.packages("stringr")
install.packages("stringr")
install.packages("assertive")
setwd("D:/Benz/Resources/DBMS/031-Finance-Accounting-Courses---Udemy-13K-course-")
