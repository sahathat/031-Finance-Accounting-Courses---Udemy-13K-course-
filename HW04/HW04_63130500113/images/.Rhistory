install.packages("DescTool")
install.packages("DescTools")
("MASS")
install.packages("MASS")
library(MASS)
library(DescTools)
cats <- cats
View(cats)
View(cats)
View(cats)
View(cats)
View(cats)
View(cats)
View(cats)
View(cats)
View(cats)
# find median of body weighted in kg and heart weighted in g
median(cats$Bwt)
median(cats$Hwt)
# 1. find mean
mean(cats$Bwt)
mean(cats$Hwt)
# 3. the most of gender cat is
factor(cats$Sex)
table(cats$Sex)
# 4. standard deviation of body weighted in kg and heart weighted in g
sd(cats$Bwt)
sd(cats$Hwt)
# 5. Who have coefficient of variation be better? between body weight and heart weight
cv(cats$Bwt) #
# 4. population standard deviation of body weighted in kg and heart weighted in g
sd(cats$Bwt) #
sd(cats$Hwt) #
median(cats$Hwt)
# 2. find median of body weighted in kg and heart weighted in g
median(cats$Bwt) #
# 1. find mean of body weighted in kg and heart weighted in g
mean(cats$Bwt) #
mean(cats$Hwt) #
# 5. Who have coefficient of variation be better? between body weight and heart weight
cvBwt <- sd(cats$Bwt)/mean(cats$Bwt) #
print(cvBwt) #
cvHwt <- sd(cats$Hwt)/mean(cats$Hwt)
print(cvHwt) #
survey <- survey
View(survey)
View(survey)
View(survey)
# 1. servey the counting of woman who never smoking
table(survey$Sex[survey$Sex == 'F'],survey$Smoke[ survey$Smoke == 'Never'])
# 1. servey the counting of woman who never smoking
table(survey$Sex[survey$Sex == 'Female'],survey$Smoke[ survey$Smoke == 'Never'])
)
# 1. servey the counting of woman who never smoking
data <- data.frame(survey$Sex[survey$Sex == 'Female'],survey$Smoke[ survey$Smoke == 'Never'])
# 1. servey the counting of woman who never smoking
data <- data.frame(survey$sex = survey$Sex[survey$Sex == 'Female'],survey$smoke = survey$Smoke[ survey$Smoke == 'Never'])
# 1. servey the counting of woman who never smoking
data <- data.frame(survey$Sex[survey$Sex == 'Female'],survey$Smoke[ survey$Smoke == 'Never'])
# 1. servey the counting of woman who never smoking
data <- data.frame(survey[survey$Sex == 'Female' && survey$Smoke == 'Never'])
table(data)
View(data)
# 1. servey the counting of woman who never smoking
count(survey)
# 1. servey the counting of woman who never smoking
count(survey$Sex)
# 1. servey the counting of woman who never smoking
length(survey$Sex)
# 1. servey the counting of woman who never smoking
length(survey[survey$Sex == 'Female' && survey == 'Never'])
# 2. find average height of male gender and female gender
mean(survey$Sex[survey$Sex == 'Male'])
# 1. servey the counting of woman who never smoking
sum(survey$Sex == 'Female', na.rm = TRUE)
# 1. servey the counting of woman who never smoking
sum(survey$Sex == 'Female' && survey$Smoke == 'Never', na.rm = TRUE)
# 1. servey the counting of woman who never smoking
sum(survey$Sex == 'Female', na.rm = TRUE)
sum(survey$Smoke == 'Never', na.rm = TRUE)
# 1. servey the counting of woman who never smoking
a <- sum(survey$Sex == 'Female', na.rm = TRUE)
b <- sum(survey$Smoke == 'Never', na.rm = TRUE)
aub <- length(survey)
print(a+b-aub)
aub <- length(survey$Sex)
print(a+b-aub)
# use condition operation
sum(survey$Sex[survey$Smoke == 'Never'] == 'Female', na.rm = TRUE)
# use set operation
a <- sum(survey$Sex == 'Female', na.rm = TRUE) #
b <- sum(survey$Smoke == 'Never', na.rm = TRUE) #
aub <- length(survey$Sex) #
View(survey)
# use set operation
a <- sum(survey$Sex == 'Male', na.rm = TRUE) # female 118 male
# use set operation
a <- sum(survey$Sex == 'Male', na.rm = TRUE) # female 118 male
# 2. find average height of male
sum(survey$Sex == 'Male', na.rm = TRUE)
b <- sum(survey$Smoke == 'Never', na.rm = FALSE) # never smoke 189
b <- sum(survey$Smoke == 'Never', na.rm = TRUE) # never smoke 189
# 2. find height mean of male and female
mean(survey$Height[survey$Sex == 'Male'],na.rm = TRUE) #
mean(survey$Height[survey$Sex == 'Female'],na.rm = TRUE) #
# 3. find height median of male and female
median(survey$Height[survey$Sex == 'Male'],na.rm = TRUE) #
median(survey$Height[survey$Sex == 'Female'],na.rm = TRUE) #
install.packages("DescTools")
install.packages("MASS")
library(DescTools)
library(MASS)
# 4. find height mode of male and female
Mode(survey$Height[survey$Sex == 'Male'],na.rm = TRUE) #
Mode(survey$Height[survey$Sex == 'Female'],na.rm = TRUE) #
# 5. find name of clap and exercise of the most count and show the count of them
fact <- factor(servey$Clap)
# 5. find name of clap and exercise of the most count and show the count of them
fact <- factor(survey$Clap)
Mode(fact)
Mode(survey$Clap)
# 5. find name of clap and exercise of the most count and show the count of them
factor(survey$Clap)
Mode(sum(survey$Clap , na.rm = TRUE))
# 5. find name of clap and exercise of the most count and show the count of them
factClap <- factor(survey$Clap)
summary(fact)
Mode(summary(fact))
Mode(summary(fact) , na.rm = TRUE)
Mode(summary(fact))
Mode(factClap)
summary(factClap) # right 147
summary(factExer)
factExer <- factor(survey$Exer)
summary(factExer)
factCatSex <- factor(cats$Sex)
summary(factCatSex)
# and replace by string with ₹+amount with mutate
# discount price
Udemy <- Udemy %>% mutate(discount_price__price_string=splice(discount_price__currency,discount_price__amount))
# Explore data
glimpse(Udemy)
library(dplyr)
library(readr)
library(stringr)
library(DescTools)
library(assertive)
# Explore data
glimpse(Udemy)
Udemy <- read.csv("https://raw.githubusercontent.com/sit-2021-int214/031-Finance-Accounting-Courses---Udemy-13K-course-/main/assignment/data/udemy_output_All_Finance__Accounting_p1_p626.csv")
# Explore data
glimpse(Udemy)
# check data type of Udemy
glimpse(Udemy)
# by id is duplicate
Udemy$id %>% duplicated() %>% sum()
# When amount price of course aren't show in table should replace by o
# discount price
Udemy$discount_price__amount <- replace(Udemy$discount_price__amount,is.na(Udemy$discount_price__amount), 0)
# price detail
Udemy$price_detail__amount <- replace(Udemy$price_detail__amount,is.na(Udemy$price_detail__amount), 0)
# When currency price of course aren't show in table should replace by INR
# discount price
Udemy$discount_price__currency <- replace(Udemy$discount_price__currency,Udemy$discount_price__currency=="", "INR")
# detail of price
Udemy$price_detail__amount <- replace(Udemy$price_detail__amount,Udemy$price_detail__amount=="", "INR")
# and replace by string with ₹+amount with mutate
# discount price
Udemy <- Udemy %>% mutate(discount_price__price_string=paste(discount_price__currency,discount_price__amount))
# note your can't use character plus character by character + character but can use paste(x1,x2,...,(collapse="-")[optional])
# price detail
Udemy <- Udemy %>% mutate(price_detail__price_string=paste(discount_price__currency,price_detail__amount))
inputs <- list(arg1 = "a", arg2 = "b")
# splice() concatenates the elements of inputs with arg3
splice(inputs, arg3 = c("c1", "c2")) %>% str()#> List of 3
library(dplyr)
library(readr)
library(stringr)
library(DescTools)
library(assertive)
# splice() concatenates the elements of inputs with arg3
splice(inputs, arg3 = c("c1", "c2")) %>% str()#> List of 3
library(tidyverse)
# splice() concatenates the elements of inputs with arg3
splice(inputs, arg3 = c("c1", "c2")) %>% str()#> List of 3
#>  $ arg1: chr "a"
#>  $ arg2: chr "b"
#>  $ arg3: chr [1:2] "c1" "c2"
list(inputs, arg3 = c("c1", "c2")) %>% str()#> List of 2
#>  $     :List of 2
#>   ..$ arg1: chr "a"
#>   ..$ arg2: chr "b"
#>  $ arg3: chr [1:2] "c1" "c2"
c(inputs, arg3 = c("c1", "c2")) %>% str()#> List of 4
Udemy <- read.csv("https://raw.githubusercontent.com/sit-2021-int214/031-Finance-Accounting-Courses---Udemy-13K-course-/main/assignment/data/udemy_output_All_Finance__Accounting_p1_p626.csv")
# Explore data
glimpse(Udemy) #data of Udemy have 13608 rows and 20 columns by each columns have
library(dplyr)
# Explore data
glimpse(Udemy) #data of Udemy have 13608 rows and 20 columns by each columns have
# check data type of Udemy
glimpse(Udemy)
Udemy <- read.csv("https://raw.githubusercontent.com/sit-2021-int214/031-Finance-Accounting-Courses---Udemy-13K-course-/main/assignment/data/udemy_output_All_Finance__Accounting_p1_p626.csv")
View(Udemy)
# check data type of Udemy
glimpse(Udemy)
library(dplyr)
library(readr)
library(stringr)
library(ggplot2)
library(assertive)
# Data cleaning
# check duplicate data
ProgBook %>% duplicated() %>% table() # 0 row are duplicated
ProgBook <- read.csv("https://raw.githubusercontent.com/safesit23/INT214-Statistics/main/datasets/prog_book.csv")
# Data cleaning
# check duplicate data
ProgBook %>% duplicated() %>% table() # 0 row are duplicated
# remove , from review because if change type of value then some values are NA.
ProgBook$Reviews <- ProgBook$Reviews %>% str_remove(",")
# change type of value of review from character to integer
ProgBook$Reviews <- as.integer(ProgBook$Reviews)
# replace value of type book from "Boxed Set - Hardcover" to "Hardcover"
ProgBook$Type <- replace(ProgBook$Type,ProgBook$Type == "Boxed Set - Hardcover", "Hardcover")
# find top 10 books title have most rating
TopRating <- ProgBook %>% select(Book_title,Rating) %>% arrange(desc(Rating)) %>% head(10)
TopRating
# find top 10 books title have most rating
TopRating <- ProgBook %>% select(Book_title,Rating) %>% arrange(desc(Rating)) %>% head(10)
TopRating
# find top 10 books title have most number of page
TopPage <- ProgBook %>% select(Book_title,Number_Of_Pages) %>% arrange(desc(Number_Of_Pages)) %>% head(10)
TopPage
# find count in each type book
TypeBook <- ProgBook %>% count(Type) %>% summarise(TypeBook=Type,count=n)
TypeBook
# find average of rating, review, number of page and price in each Type of book
AverageTypeBook <- ProgBook %>%
group_by(Type) %>%
select(Rating,Reviews,Number_Of_Pages,Price) %>%
summarise(avg_rating=mean(Rating),
avg_review=mean(Reviews),
avg_number_page=mean(Number_Of_Pages),
avg_price=mean(Price)
)
AverageTypeBook
# Histogram
# show histogram of rating book by bandwidth = 0.5
HistRating <- ProgBook %>% ggplot(aes(x=Rating)) + geom_histogram(fill="gold",col="white",binwidth=0.5)
HistRating + ggtitle("Number show of rating book") +
xlab("Rating") + ylab("Count")
# show histogram of number of page book by bandwidth = 100
HistPage <- ProgBook %>% ggplot(aes(x=Number_Of_Pages)) + geom_histogram(fill="maroon",col="gold",binwidth=100)
HistPage + ggtitle("Number show number of page book") +
xlab("Number of page") + ylab("Count")
HistRating + ggtitle("Number show rating book") +
xlab("Rating") + ylab("Count")
# Bar chart
# show top 5 type book have the most average price in each type book
BarTypeTopAvgPrice <- AveragePrice %>% ggplot(aes(x=reorder(Type, -avg_price),y=avg_price)) + geom_bar(stat = "identity",fill="lightgreen",col="green")
# show top 5 type book have the most average price in each type book.
BarTypeTopAvgPrice <- AverageTypeBook %>% ggplot(aes(x=reorder(Type, -avg_price),y=avg_price)) + geom_bar(stat = "identity",fill="lightgreen",col="green")
BarTypeTopAvgPrice + ggtitle("Top 5 type books have the most average price") +
xlab("Type of book") + ylab("average of price")
BarTypeTopAvgPrice + ggtitle("Top 5 type books have the most average price") +
xlab("") + ylab("average of price")
# Bar chart
# show top 5 type book have the most reviews in each type book.
BarTypeTopAvgReview <- AverageTypeBook %>% ggplot(aes(x=reorder(Type, -avg_review),y=avg_review)) + geom_bar(stat = "identity",fill="lightgreen",col="green")
BarTypeTopAvgReview + ggtitle("Top 5 type books have the most average price") +
xlab("") + ylab("average of price")
BarTypeTopAvgPrice + ggtitle("Top 5 type books have the most average price") +
xlab("") + ylab("average of price")
# Bar chart
# show top 5 type book have the most reviews in each type book.
BarTypeTopAvgReview <- AverageTypeBook %>% ggplot(aes(x=reorder(Type, -avg_review),y=avg_review)) + geom_bar(stat = "identity",fill="purple",col="violet")
BarTypeTopAvgReview + ggtitle("Top 5 type books have the most average reviews") +
xlab("") + ylab("average of Review")
BarTypeTopAvgPrice + ggtitle("Top 5 type books have the most average price") +
xlab("") + ylab("average of price")
# Pie chart
# show count of book in type of book to pie chart.
PieTypeBook <- ggplot(TypeBook,aes(x="",y=count,fill = TypeBook)) +
geom_col() + coord_polar(theta = "y")
PieTypeBook + ggtitle("Number show each type of book") + xlab("") + ylab("All book have 271 books")
# Scatter plot
# compare rating and reviews by show each type of book are different.
ScatterRatingReview <- ProgBook %>% ggplot(aes(x=Rating,y=Reviews)) + geom_point(aes(color=Type))
ScatterRatingReview + ggtitle("Compare rating and review by type of book") + xlab("Rating") + ylab("Reviews")
ScatterRatingReview + ggtitle("Compare rating and review by type of book") + xlab("Rating") + ylab("Reviews")
# Scatter plot
# compare rating and reviews by show each type of book are different.
ScatterRatingReview <- ProgBook %>% filter(Rating<=100) %>% ggplot(aes(x=Rating,y=Reviews)) + geom_point(aes(color=Type))
ScatterRatingReview + ggtitle("Compare rating and review by type of book") + xlab("Rating") + ylab("Reviews")
# Scatter plot
# compare rating and reviews by show each type of book are different.
ScatterRatingReview <- ProgBook %>% filter(ProgBook$Rating<=100) %>% ggplot(aes(x=Rating,y=Reviews)) + geom_point(aes(color=Type))
ScatterRatingReview + ggtitle("Compare rating and review by type of book") + xlab("Rating") + ylab("Reviews")
# Scatter plot
# compare rating and reviews by show each type of book are different.
ScatterRatingReview <- ProgBook %>% filter(Reviews<=100) %>% ggplot(aes(x=Rating,y=Reviews)) + geom_point(aes(color=Type))
ScatterRatingReview + ggtitle("Compare rating and review by type of book") + xlab("Rating") + ylab("Reviews")
# Scatter plot
# compare rating and reviews by show each type of book are different.
ScatterRatingReview <- ProgBook %>% filter(Reviews<=1000) %>% ggplot(aes(x=Rating,y=Reviews)) + geom_point(aes(color=Type))
ScatterRatingReview + ggtitle("Compare rating and review by type of book") + xlab("Rating") + ylab("Reviews")
# Scatter plot
# compare rating and reviews by show each type of book are different.
ScatterRatingReview <- ProgBook %>% filter(Reviews<=10) %>% ggplot(aes(x=Rating,y=Reviews)) + geom_point(aes(color=Type))
ScatterRatingReview + ggtitle("Compare rating and review by type of book") + xlab("Rating") + ylab("Reviews")
# Scatter plot
# compare rating and reviews by show each type of book are different.
ScatterRatingReview <- ProgBook %>% filter(Reviews<=100) %>% ggplot(aes(x=Rating,y=Reviews)) + geom_point(aes(color=Type))
ScatterRatingReview + ggtitle("Compare rating and review by type of book by Review to 100") + xlab("Rating") + ylab("Reviews")
# Scatter plot
# compare rating and reviews by show each type of book are different.
ScatterRatingReview <- ProgBook %>% ggplot(aes(x=Rating,y=Reviews)) + geom_point(aes(color=Type))
ScatterRatingReview + ggtitle("Compare rating and review by type of book by Review") + xlab("Rating") + ylab("Reviews")
MeasureRatingReview + ggtitle("Compare and predict page of book with price by type of book") + xlab("Price") + ylab("")
# Measurement chart
# compare number of page and price by show each type of book are different and predict it is possible? if book have more page, price of book is increase.
MeasureRatingReview <- ProgBook %>% ggplot(aes(x=Price,y=Number_Of_Pages)) + geom_point(aes(color=Type)) + geom_smooth()
MeasureRatingReview + ggtitle("Compare and predict page of book with price by type of book") + xlab("Price") + ylab("")
# Box plot
# show rating in each type book.
BoxRating <- ProgBook %>% ggplot(aes(x=Type,y=Rating)) + geom_boxplot(aes(color=Type)) + geom_dotplot(aes(color=Type),binaxis='y', stackdir='center', dotsize=0.3)
BoxRating
BoxRating + ggtitle("Rating by type of book in box plot") + xlab("") + ylab("Rating")
ScatterRatingReview + ggtitle("Compare rating and review by type of book by Review") + xlab("Rating") + ylab("Reviews")
ScatterRatingReview <- ProgBook %>% filter(Reviews<=100) %>% ggplot(aes(x=Rating,y=Reviews)) + geom_point(aes(color=Type))
ScatterRatingReview + ggtitle("Compare rating and review by type of book by Review") + xlab("Rating") + ylab("Reviews")
PieTypeBook + ggtitle("Number show each type of book") + xlab("") + ylab("All book have 271 books")
# Scatter plot
# compare rating and reviews by show each type of book are different.
ScatterRatingReview <- ProgBook %>% ggplot(aes(x=Rating,y=Reviews)) + geom_point(aes(color=Type))
setwd("E:/R_language/INT214/Project/031-Finance-Accounting-Courses---Udemy-13K-course-/HW04/HW04_63130500113/images")
BarTypeTopAvgPrice + ggtitle("Top 5 type books have the most average price") +
xlab("") + ylab("average of price")
BarTypeTopAvgReview + ggtitle("Top 5 type books have the most average reviews") +
xlab("") + ylab("average of Review")
HistPage + ggtitle("Number show number of page book") +
xlab("Number of page") + ylab("Count")
HistRating + ggtitle("Number show rating book") +
xlab("Rating") + ylab("Count")
UncertainlyRatingReview + ggtitle("Compare and predict page of book with price by type of book") + xlab("Price") + ylab("")
# Box plot
# show rating in each type book.
BoxRating <- ProgBook %>% ggplot(aes(x=Type,y=Rating)) + geom_boxplot(aes(color=Type)) + geom_dotplot(aes(color=Type),binaxis='y', stackdir='center', dotsize=0.3)
# Uncertainly scatter plot
# compare number of page and price by show each type of book are different and predict it is possible? if book have more page, price of book is increase.
UncertainlyRatingReview <- ProgBook %>% ggplot(aes(x=Price,y=Number_Of_Pages)) + geom_point(aes(color=Type)) + geom_smooth()
UncertainlyRatingReview + ggtitle("Compare and predict page of book with price by type of book") + xlab("Price") + ylab("")
